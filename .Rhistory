#raw$vicinity<-factor(raw$vicinity)
#raw$dairy<-factor(raw$dairy)
#raw$credit<-factor(raw$credit)
#raw$discount<-factor(raw$discount)
logistf(formula=raw[,10]~raw[,2]+raw[,3]+raw[,5]+raw[,6]+raw[,7]+raw[,8]+raw[,15]+raw[,16]
+raw[,17])
mosaicplot(raw[,10],raw[,2])
mosaicplot(raw[,10],raw[,2],y~x)
mosaicplot(raw[,10]~raw[,2])
mosaicplot(raw[,10]~raw[,5])
mosaicplot(raw[,10]~raw[,3])
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Combined.xlsx",endRow = 71,
sheetName = "mmr_levee",header = TRUE)
View(raw)
attach(raw)
attach(raw)
Q4<-factor(Q4)
Q5<-factor(Q5)
Q7<-factor(Q7)
Q13<-factor(Q13)
mylogit<-glm(Q9~Q1+Q6+Q4+Q5+Q2+Q7+Q11+Q12+Q13,family = "binomial")
summary(mylogit)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Combined.xlsx",endRow = 71,
sheetName = "Sheet1",header = TRUE)
View(raw)
attach(raw)
Q4<-factor(Q4)
Q5<-factor(Q5)
Q7<-factor(Q7)
Q13<-factor(Q13)
mylogit<-glm(Q9~Q1+Q6+Q4+Q5+Q2+Q7+Q11+Q12+Q13,family = "binomial")
summary(mylogit)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Dataset.xlsx",endRow = 71,
sheetName = "Sheet1",header = TRUE)
View(raw)
attach(raw)
library(xlsx)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Dataset.xlsx",endRow = 71,
sheetName = "Sheet1",header = TRUE)
View(raw)
attach(raw)
mylogit<-glm(affect~vicinity+income+size1+size2+size3+range1+range2+
range3+dairy+hours1+hours2+hours3+credit+discount+
competition1+competition2+competition3
,family = "binomial")
summary(mylogit)
mylogit<-glm(affect~vicinity+income+size+range+dairy+hours+credit+discount+
competition,family = "binomial")
summary(mylogit)
size<-factor(size)
competition<-factor(competition)
range<-factor(range)
hours<-factor(hours)
mylogit<-glm(affect~vicinity+income+size+range+dairy+hours+credit+discount+
competition,family = "binomial")
summary(mylogit)
quartz(title="Vicinity vs. Getting Affected") # creates a quartz window with title
library(ggplot2)
quartz(title="Vicinity vs. Getting Affected") # creates a quartz window with title
library(grDevices)
quartz(title="Vicinity vs. Getting Affected") # creates a quartz window with title
install.packages("grDevices")
plot(vicinity,affect,xlab="Vicinity",ylab="Probability of getting affected") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(affect~vicinity,family=binomial,raw) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(vicinity=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
g
plot(income,affect,xlab="Vicinity",ylab="Probability of getting affected") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(affect~income,family=binomial,raw) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(income=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(income,fitted(g),pch=20)
size<-factor(size)
competition<-factor(competition)
range<-factor(range)
hours<-factor(hours)
mylogit<-glm(affect~vicinity+income+size+range+dairy+hours+credit+discount+
competition,family = "binomial")
summary(mylogit)
library(xlsx)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Dataset.xlsx",
sheetName = "CT",header = TRUE)
View(raw)
size<-factor(size)
competition<-factor(competition)
range<-factor(range)
hours<-factor(hours)
mosaicplot(raw)
df<-data.frame(front=c('Financial','Footfall','Frequency of customers',
'Inventory (Stocking)'),scale=c('No effect','Minor effect',
'Moderate effect','Major effect'))
df
df<-data.frame(front=rep(c('Financial','Footfall','Frequency of customers',
'Inventory (Stocking)'),4),scale=rep(c('No effect','Minor effect',
'Moderate effect','Major effect'),4)
df
df<-data.frame(front=rep(c('Financial','Footfall','Frequency of customers',
'Inventory (Stocking)'),4),scale=rep(c('No effect','Minor effect',
'Moderate effect','Major effect'),4))
df
df<-data.frame(front=c(rep('Financial',4),rep('Footfall',4),rep('Frequency of customers',4),
rep('Inventory (Stocking)',4)),scale=rep(c('No effect','Minor effect',
'Moderate effect','Major effect'),4))
df
table(Dataset)
table(raw)
raw<-read.table(file = "D:/Term 4/BRM/Project/Dataset.xlsx",stringsAsFactors = true)
raw<-read.table(file = "D:/Term 4/BRM/Project/Impact fronts.csv",stringsAsFactors = true)
raw<-read.table(file = "D:/Term 4/BRM/Project/Impact fronts.csv",stringsAsFactors = TRUE)
raw<-read.csv(file = "D:/Term 4/BRM/Project/Impact fronts.csv",stringsAsFactors = TRUE)
View(raw)
df<-data.frame(front=c(rep('Financial',4),rep('Footfall',4),rep('Frequency of customers',4),
rep('Inventory (Stocking)',4)),scale=rep(c('No effect','Minor effect',
'Moderate effect','Major effect'),4))
df
raw<-read.csv(file = "D:/Term 4/BRM/Project/Impact fronts.csv",stringsAsFactors = TRUE)
mosaicplot(raw)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Dataset.xlsx",sheetName = "strtaegies",
stringsAsFactors = TRUE)
raw<-read.xlsx(file = "D:/Term 4/BRM/Project/Dataset.xlsx",sheetName = "strategies",
stringsAsFactors = TRUE)
View(raw)
table(raw)
levels(raw)
levels(raw$CRM)
install.packages("ggplot2")
?geom_point
??geom_point
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
BodyWeight
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(airquality$Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
aggTotals <- aggregate(Emissions ~ year,NEI, sum)
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
baltimoreNEI <- NEI[NEI$fips=="24510",]
aggTotalsBaltimore <- aggregate(Emissions ~ year, baltimoreNEI,sum)
barplot(
aggTotalsBaltimore$Emissions,
names.arg=aggTotalsBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From All Baltimore City Sources"
)
library(ggplot2)
ggp <- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
print(ggp)
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalCombustion <- (combustionRelated & coalRelated)
combustionSCC <- SCC[coalCombustion,]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
library(ggplot2)
ggp <- ggplot(combustionNEI,aes(factor(year),Emissions/10^5)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
print(ggp)
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
baltimoreVehiclesNEI <- vehiclesNEI[vehiclesNEI$fips==24510,]
library(ggplot2)
ggp <- ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(ggp)
vehiclesBaltimoreNEI <- vehiclesNEI[vehiclesNEI$fips == 24510,]
vehiclesBaltimoreNEI$city <- "Baltimore City"
vehiclesLANEI <- vehiclesNEI[vehiclesNEI$fips=="06037",]
vehiclesLANEI$city <- "Los Angeles County"
bothNEI <- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)
library(ggplot2)
ggp <- ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
print(ggp)
barplot(
(aggTotals$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
baltimoreNEI <- NEI[NEI$fips=="24510",]
aggTotalsBaltimore <- aggregate(Emissions ~ year, baltimoreNEI,sum)
barplot(
aggTotalsBaltimore$Emissions,
names.arg=aggTotalsBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From All Baltimore City Sources"
)
print(ggp)
print(ggp)
ggp <- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
print(ggp)
ggp <- ggplot(combustionNEI,aes(factor(year),Emissions/10^5)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
print(ggp)
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
#Subsetting motor vehicles in Baltimore
baltimoreVehiclesNEI <- vehiclesNEI[vehiclesNEI$fips==24510,]
library(ggplot2)
#ggplot2
ggp <- ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(ggp)
vehiclesBaltimoreNEI <- vehiclesNEI[vehiclesNEI$fips == 24510,]
vehiclesBaltimoreNEI$city <- "Baltimore City"
vehiclesLANEI <- vehiclesNEI[vehiclesNEI$fips=="06037",]
vehiclesLANEI$city <- "Los Angeles County"
bothNEI <- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)
library(ggplot2)
#ggplot2
ggp <- ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
print(ggp)
ppois(10,lambda=5*3)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
choose(n = 52,1)
4/52
0
21/52
12/52
2/51
install.packages("knitr")
setwd("C:\Users\ABC\datasciencecoursera\RepData_PeerAssessment1")
setwd("C:/Users/ABC/datasciencecoursera/RepData_PeerAssessment1")
getwd()
knit2html()
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
setwd("C:/Users/ABC/datasciencecoursera/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
data<-read.csv("activity.csv")
head(data)
?bzfile
class(data$date)
data<-read.csv("activity.csv",header = TRUE)
class(data$date)
class(data$interval)
class(data$steps)
data$date<-as.Date(data$date)
class(data$date)
data$date[1]
weekdays(data$date[1],abbreviate = TRUE)
class(data)
aggregate(steps ~ date, data, mean)
mean(aggregate(steps ~ date, data, mean))
mean(aggregate(steps ~ date, data, mean),na.rm = TRUE)
aggregate(steps ~ date, data, mean)
class(x)
x<-aggregate(steps ~ date, data, mean)
class(x)
mean(x)
head(x)
mean(x$steps)
groupByDay<-aggregate(steps ~ date, data, mean)
mean(groupByDay$steps)
hist(groupByDay)
hist(groupByDay$date)
hist(groupByDay$steps, breaks = groupByDay$date)
hist(groupByDay$steps, breaks = date(groupByDay$date))
attach(data)
hist(x = steps,breaks = date)
hist(data)
hist(data$steps)
hist(steps~date)
hist(steps,date)
class(groupByDay)
groupByDay
class($date)
class(groupByDay$date)
class(groupByDay$steps)
hist(groupByDay$steps)
plot(groupByDay$steps)
plot(groupByDay$date~groupByDay$steps)
hist(groupByDay$steps, breaks = groupByDay$date)
plot(groupByDay$date~groupByDay$steps)
plot(groupByDay$steps~groupByDay$date)
barplot(groupByDay$steps~groupByDay$date)
barplot(height = groupByDay$steps,width = groupByDay$date)
barplot(height = groupByDay$steps)
barplot(height = groupByDay$steps,names.arg = groupByDay$date)
barplot(height = groupByDay$steps,names.arg = groupByDay$date,cex.axis = 0.5)
barplot(height = groupByDay$steps,names.arg = groupByDay$date,cey.axis = 0.5)
barplot(height = groupByDay$steps,names.arg = groupByDay$date,cex.axis = .25)
barplot(height = groupByDay$steps,names.arg = factor(groupByDay$date),cex.axis = )
barplot(height = groupByDay$steps,names.arg = factor(groupByDay$date),cex.axis = .5)
barplot(height = groupByDay$steps,names.arg = factor(groupByDay$date),cex.axis =.5)
barplot(height = groupByDay$steps,names.arg = factor(groupByDay$date),cex.axis=.5)
barplot(height = groupByDay$steps,names.arg = groupByDay$date)
barplot(height = groupByDay$steps,names.arg = as.date(groupByDay$date,format = "%d-%b-%y"))
barplot(height = groupByDay$steps,names.arg = as.Date(groupByDay$date,format = "%d-%b-%y"))
as.Date(groupByDay$date,format = "%d-%b-%y")
as.Date(groupByDay$date,format = "%d %b %y")
groupByDay$date
as.Date(groupByDay$date,format = "%m/%d/%y")
class(groupByDay$date)
format(groupByDay$date,format = "%m/%d/%y")
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%m/%d/%y"))
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%m/%d/%y"),cex.axis=0.5, cex.names=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%b-%y"),cex.axis=0.5, cex.names=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%b-%y"),cex.axis=0.5, cex.names=0.5,xlab = "Date,ylab = "Mean Steps")
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%b-%y"),cex.axis=0.5, cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.axis=0.5, cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.35)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.axis=0.5, cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=0.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=0.5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=5)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=.55)
axis(side=1,at = groupByDay$date,labels = groupByDay$date,cex.axis=0.5,padj=.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps",padj=.5)
?axis
groupByDay$date
seq(1:53)
axis(side=1,at = seq(1:53),labels = groupByDay$date,cex.axis=0.5,)
axis(side=1,at = seq(1:53),labels = groupByDay$date,cex.axis=0.5,padj=.5)
axis(side=1,at = seq(1:53),labels = groupByDay$date,cex.axis=0.5,padj=.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps",padj=.5)
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,xlab = "Date",ylab = "Mean Steps")
barplot(height = groupByDay$steps,names.arg = format(groupByDay$date,format = "%d-%m-%y"),cex.names=0.5,cex.axis=0.5,xlab = "Date",ylab = "Mean Steps")
groupMean<-aggregate(steps ~ date, data, mean)
barplot(height = groupMean$steps,names.arg = format(groupMean$date,format = "%d-%m-%y"),cex.names=0.5,cex.axis=0.5,xlab = "Date",ylab = "Mean Steps")
groupMedian<-aggregate(steps ~ date, data, median)
groupMedian
groupMean
groupMedian<-aggregate(steps ~ date, data, FUN=median)
groupMedian
mean(groupMean$steps)
median(groupMedian$steps)
data <- read.csv("activity.csv", header = T)
dataNaOmit <- subset(data, is.na(data$steps) == F)
library(plyr)
totalPerDay <- ddply(dataNaOmit, .(date), summarise, steps=sum(steps))
hist(totalPerDay$steps, breaks = 20, main="Number of Steps",
xlab="Total number of steps taken each day", ylab = "Number of Days", col="blue")
mean(totalPerDay$steps)
median(totalPerDay$steps)
totalPerDay
groupMean<-aggregate(steps ~ date, data, sum)
barplot(height = groupMean$steps,names.arg = format(groupMean$date,format = "%d-%m-%y"),cex.names=0.5,cex.axis=0.5,xlab = "Date",ylab = "Mean Steps")
groupMean
totalPerDay
groupMean
hist(totalPerDay$steps, breaks = 20, main="Number of Steps",
xlab="Total number of steps taken each day", ylab = "Number of Days", col="blue")
hist(x = groupSum$steps,breaks = 5)
groupSum<-aggregate(steps ~ date, data, sum)
hist(x = groupSum$steps,breaks = 5)
hist(x = groupSum$steps,breaks = 25)
hist(totalPerDay$steps, breaks = 20, main="Number of Steps",
xlab="Total number of steps taken each day", ylab = "Number of Days", col="blue")
hist(x = groupSum$steps,breaks = 20)
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "gold")
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange")
hist(x = groupSum$steps,breaks = 22,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange")
hist(x = groupSum$steps,breaks = 100,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange")
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange", xlim = seq(0:22000))
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange", xlim =22000)
?hist
data<-read.csv("activity.csv",header = TRUE)
data$date<-as.Date(data$date)
attach(data)
groupSum<-aggregate(steps ~ date, data, sum)
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange"")
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange")
hist(x = groupSum$steps,breaks = 20,xlab = "Steps count",ylab = "No. of days",main = "Total number of steps taken each day",col = "orange")
mean(groupSum$steps)
median(groupSum$steps)
dataNaOmit <- subset(data, is.na(data$steps) == F)
library(plyr)
totalPerDay <- ddply(dataNaOmit, .(date), summarise, steps=sum(steps))
hist(totalPerDay$steps, breaks = 20, main="Number of Steps",
xlab="Total number of steps taken each day", ylab = "Number of Days", col="blue")
mean(totalPerDay$steps)
median(totalPerDay$steps)
averagePerInterval <- ddply(dataNaOmit, .(interval), summarise, steps=mean(steps))
plot(averagePerInterval$interval, averagePerInterval$steps,axes = F, type="l", col="blue", xlab="Time", ylab="Average Number of Steps",
main="Average Daily Activity Pattern")
axis(1,at=c(0,600,1200,1800,2400), label = c("0:00","6:00","12:00","18:00","24:00"))
axis(2)
groupMean<-aggregate(steps~interval,data,mean)
groupMean
groupMean<-aggregate(steps~interval,data,mean)
plot(x = groupMean$interval/60,y = groupMean$steps,type="l")
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlim = seq(0:2400, by = 20),xlab="Interval",ylab="Steps")
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlim = seq(1:2400, by = 20),xlab="Interval",ylab="Steps")
seq(1:2400, by = 20)
seq(0:2400, by = 20)
seq(20:2400, by = 20)
seq(0,2400, by = 20)
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlim = seq(0,2400, by = 20),xlab="Interval",ylab="Steps")
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlim = seq(0,2200, by = 20),xlab="Interval",ylab="Steps")
groupMean$interval
class('from' must be of length 1)
class(groupMean$interval)
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlab="Interval",ylab="Steps")
axis(side = 1,at = seq(0,2400,100),labels = seq(0,24))
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlab="Interval",ylab="Steps")
axis(side = 1,at = seq(0,2400,100),labels = seq(0,24))
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlab="Interval",ylab="Steps",axes=FALSE)
axis(side = 1,at = seq(0,2400,100),labels = seq(0,24))
axis(2)
plot(x = groupMean$interval,y = groupMean$steps,type="l",xlab="Hour of the day",ylab="Steps",axes=FALSE)
axis(side = 1,at = seq(0,2400,100),labels = seq(0,24))
axis(2)
is.na(steps)
Missing <- count(df = data,vars = is.na(steps))
count(df = data,vars = is.na(steps))
sum(df = data,vars = is.na(steps))
sum(is.na(steps)
)
Missing <- sum(is.na(steps))
sum(is.na(steps))
max(groupMean$steps)
sort(x = groupMean)
sort(x = groupMean$steps)
sort(x = groupMean$steps,decreasing)
sort(x = groupMean$steps,decreasing = T)
groupMean$interval[1]
max(groupMean$steps)
groupMean$interval[groupMean$steps=max(groupMean$steps)]
groupMean$interval[groupMean$steps==max(groupMean$steps)]
x<-(groupMean$interval[groupMean$steps==max(groupMean$steps)]ceiling
x
x<-groupMean$interval[groupMean$steps==max(groupMean$steps)]
x
x/100
Hours=round(x/100,digits = 0)
round(x/100,digits = 0)
